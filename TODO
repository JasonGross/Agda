
AIM4
----

* good error messages

* When instantiating a module we should generate functions for the axioms and
  constructors and probably for everything else as well (reducing to the
  instantiated versions from the instantiated module). Together with
  monomorphic constructors.

* getopts

* debug information

* optimise

* check that underscores have been solved

* allow more things in postulates (infix, private?, ..)

(done) Monomorphic constructors.

(done) ? should not be a valid operator characted

(done) actually check sorts

(done) Get rid of distinction between hole and underscore. Instead keep a
       separate list of which metas are interaction points.

(done) Blocked constructor in Terms and Types

(done) insert hidden arguments in lhss

(done) ranges in error messages

(done) abstract info on constraints (TCEnv instead of Context)
       and interaction meta vars






Syntax
------

  * Invent syntax for fancy case (should we have fancy case?)

Error reporting
---------------

  * Check out lex/parse errors (what position and what input is reported).

  * Think about laziness and exceptions. In particular in the scope checking.

 vim: sts=2 sw=2 ts=80
