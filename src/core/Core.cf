---  Core Syntax ---

layout "where";

-- A program is a list of declarations:
Module.   Program   ::= [Decl] ;
separator Decl ";" ;

-- An expression is either \x -> e or i e1 ... en

EIdent.   Exp2   ::= Ident ;                 -- without arguments
EApp.     Exp1   ::= Ident  [Exp2] ;        -- with arguments
EAbs.     Exp    ::= "\\" Ident "->" Exp ;
_.        Exp2   ::= "("Exp")" ;             -- nontrivial arguments
separator nonempty Exp2 "" ;

-- A type expression is either "Set" or "(x : A) -> B" or a term: 

TFun.   TExp     ::= "(" VarDecl ")" "->" TExp ;
TSet.   TExp     ::= "Set" ;
TEl.    TExp     ::= Exp ;
VDecl.   VarDecl ::= Ident ":" TExp  ;

-- A declaration is either a typing declaration or a definition.
-- A typing declaration is of the form "i : e":

Var.  Decl    ::= VarDecl ; 

-- An explicit definition is of the form "i = e"

Def.  Decl    ::= Ident "=" Exp ;

-- An implicit definition is of the form

--  fun f (x1:t1) ... (xn:tn) : te =
--              c1 y1 ... ym -> e1 |
--                  ...
--              ck z1 ... zm -> ek

DecImpl.    Decl        ::= "fun" ImplTyping "=" [Branch] ;
Implt.      ImplTyping  ::= Ident Telescope ":" TExp ;
Telcon.   Telescope     ::= [VarDecl];
[].      [VarDecl]     ::= ;
(:).     [VarDecl]     ::= "(" VarDecl ")" [VarDecl];
BranchCon. Branch       ::= ApplVars "->" Exp ;
AppPattern.  ApplVars   ::= [Ident] ;    -- an application to variables
separator nonempty Ident "" ;
separator Branch "|" ;


-- A data type definition is of the form

--  data D (x1:t1) ... (xn:tn) :tm =
--                c1 : e1| 
--                   ... 
--                cn : en
DecData.   Decl     ::= "data" ImplTyping "=" [ConstrDecl] ;
Const.    ConstrDecl::= Ident ":" Exp;
separator ConstrDecl "|" ;
comment "--" ;
comment "{-" "-}" ;

