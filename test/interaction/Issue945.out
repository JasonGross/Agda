Agda2> (agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-info-action "*Type-checking*" "Checking Issue945 (Issue945.agda).\n" t)
(agda2-info-action "*Type-checking*" "Finished Issue945.\n" t)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : .A → ((x : .A) → ¬ A x) → ((x : .A) → A x) → ⊥\n?1 : ((x : .A) → P x) → ∃ P → ⊥\n" nil)
((last . 1) . (agda2-goals-action '(0 1)))
Agda2> (agda2-status-action "")
(agda2-info-action "*Auto*" "Listing solution(s) 0-0\n0  λ x z z₁ → z x (z₁ x)\n" nil)
((last . 1) . (agda2-goals-action '(0 1)))
Agda2> (agda2-status-action "")
(agda2-info-action "*Auto*" "Only 1 solution(s) found" nil)
((last . 1) . (agda2-goals-action '(0 1)))
Agda2> (agda2-status-action "")
(agda2-info-action "*Auto*" "Listing solution(s) 0-0\n0  λ z _ → e a (z a)\n" nil)
((last . 1) . (agda2-goals-action '(0 1)))
Agda2> (agda2-status-action "")
(agda2-info-action "*Auto*" "Only 1 solution(s) found" nil)
((last . 1) . (agda2-goals-action '(0 1)))
Agda2> 